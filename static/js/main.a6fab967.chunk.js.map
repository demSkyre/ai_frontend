{"version":3,"sources":["services/PacienteService.js","contexts/PacienteContext.jsx","components/PacienteForm.jsx","components/PacienteList.jsx","App.js","serviceWorker.js","index.js"],"names":["PacienteService","baseUrl","paciente","axios","post","this","then","res","data","get","put","_id","id","delete","PacienteContext","createContext","PacienteContextProvider","props","pacienteService","useState","pacientes","setPacientes","editPaciente","setEditPaciente","useEffect","readAll","Provider","value","createPaciente","create","deletePaciente","filter","p","findPaciente","find","updatePaciente","update","map","children","PacienteForm","isVisible","setIsVisible","useContext","initialPacienteState","nombres","apellidos","fecha_alta","fecha_baja","pacienteData","setPacienteData","updateField","field","console","log","dialogFooter","className","label","icon","onClick","visible","modal","style","width","contentStyle","overflow","header","onHide","footer","onChange","e","target","trim","Date","toISOString","substring","dateFormat","PacienteList","float","textAlign","selectionMode","onSelectionChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+RAEaA,EAAb,iDAMIC,QAAU,sDANd,mDAQWC,GACH,OAAOC,IAAMC,KAAKC,KAAKJ,QAAQ,YAAaC,GAAUI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAT9E,gCAaQ,OAAOL,IAAMM,IAAIJ,KAAKJ,SAASK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAbvD,6BAgBWN,GACH,OAAOC,IAAMO,IAAIL,KAAKJ,QAAQ,YAAYC,EAASS,IAAKT,GAAUI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAjB1F,6BAoBWI,GACH,OAAOT,IAAMU,OAAOR,KAAKJ,QAAQ,YAAYW,GAAIN,MAAK,SAAAC,GAAG,OAAIA,EAAIC,YArBzE,KCCaM,EAAkBC,0BA2DhBC,EAzDiB,SAACC,GAC/B,IAAMC,EAAkB,IAAIlB,EADa,EAGPmB,mBAAS,IAHF,mBAGlCC,EAHkC,KAGvBC,EAHuB,OAKDF,mBAAS,MALR,mBAKlCG,EALkC,KAKpBC,EALoB,KAOzCC,qBAAU,WACRN,EAAgBO,UAAUnB,MAAK,SAACE,GAAD,OAAUa,EAAab,QACrD,CAACU,EAAiBE,IAgCrB,OACE,kBAACN,EAAgBY,SAAjB,CACEC,MAAO,CACLC,eAjCiB,SAAC1B,GACtBgB,EACGW,OAAO3B,GACPI,MAAK,SAACE,GAAD,OAAUa,EAAa,GAAD,mBAAKD,GAAL,CAAgBZ,SA+B1CsB,eA5BiB,SAAClB,GACtBM,EACGL,OAAOD,GACPN,MAAK,kBAAMe,EAAaD,EAAUW,QAAO,SAACC,GAAD,OAAOA,EAAErB,MAAQC,UA0BzDqB,aAvBe,SAACrB,GACpB,IAAMV,EAAWkB,EAAUc,MAAK,SAACF,GAAD,OAAOA,EAAErB,MAAQC,KAEjDW,EAAgBrB,IAqBZiC,eAlBiB,SAACjC,GACtBgB,EACGkB,OAAOlC,GACPI,MAAK,SAACE,GAAD,OACJa,EACED,EAAUiB,KAAI,SAACL,GAAD,OAAQA,EAAErB,MAAQT,EAASS,IAAMH,EAAON,SAI5DqB,EAAgB,OAUZD,eACAF,cAGDH,EAAMqB,W,uECkFEC,EApIM,SAACtB,GAAW,IACvBuB,EAA4BvB,EAA5BuB,UAAWC,EAAiBxB,EAAjBwB,aADW,EAQ1BC,qBAAW5B,GAJbc,EAJ4B,EAI5BA,eACAE,EAL4B,EAK5BA,eACAR,EAN4B,EAM5BA,aACAa,EAP4B,EAO5BA,eAGIQ,EAAuB,CAC3BhC,IAAK,KACLiC,QAAS,GACTC,UAAW,GACXC,WAAY,KACZC,WAAY,MAfgB,EAkBU5B,mBAASwB,GAlBnB,mBAkBvBK,EAlBuB,KAkBTC,EAlBS,KAoB9BzB,qBAAU,WACJF,GAAc2B,EAAgB3B,KACjC,CAACA,IAEJ,IAAM4B,EAAc,SAAC1C,EAAM2C,GACzBF,EAAgB,eACXD,EADU,eAEZG,EAAQ3C,KAGX4C,QAAQC,IAAIL,IAqBRM,EACJ,yBAAKC,UAAU,mCACb,kBAAC,SAAD,CAAQC,MAAM,SAASC,KAAK,cAAcC,QApBtB,WAClBpC,IACFQ,EAAekB,EAAarC,KAC5BsC,EAAgBN,IAElBF,GAAa,MAgBX,kBAAC,SAAD,CAAQe,MAAM,OAAOC,KAAK,cAAcC,QAbvB,WACdpC,EAGHa,EAAea,GAFfpB,EAAeoB,GAIjBC,EAAgBN,GAChBF,GAAa,OAef,OACE,6BACE,kBAAC,SAAD,CACEkB,QAASnB,EACToB,OAAO,EACPC,MAAO,CAAEC,MAAO,SAChBC,aAAc,CAAEC,SAAU,WAC1BC,OAAO,wBACPC,OAAQ,kBAZZzB,GAAa,QACbQ,EAAgBN,IAYZwB,OAAQb,GAER,yBAAKC,UAAU,kBACb,6BACA,yBAAKA,UAAU,iBACb,kBAAC,YAAD,CACE5B,MAAOqB,EAAaJ,QACpBwB,SAAU,SAACC,GAAD,OAAOnB,EAAYmB,EAAEC,OAAO3C,MAAM4C,OAAQ,cAEtD,4CAEF,6BACA,yBAAKhB,UAAU,iBACf,kBAAC,YAAD,CACI5B,MAAOqB,EAAaH,UACpBuB,SAAU,SAACC,GAAD,OAAOnB,EAAYmB,EAAEC,OAAO3C,MAAM4C,OAAQ,gBAEtD,8CAEF,6BACA,yBAAKhB,UAAU,iBACb,kBAAC,WAAD,CACE5B,MACEqB,EAAaF,YACb,IAAI0B,KAAKxB,EAAaF,WAAa,KAErCsB,SAAU,SAACC,GAAD,OACRnB,EACEmB,EAAEC,OAAO3C,MAAM8C,cAAcC,UAAU,EAAG,IAC1C,eAGJC,WAAW,aAEb,kDAEF,6BACA,yBAAKpB,UAAU,iBACb,kBAAC,WAAD,CACE5B,MACEqB,EAAaD,YACb,IAAIyB,KAAKxB,EAAaD,WAAa,KAErCqB,SAAU,SAACC,GAAD,OACRnB,EACEmB,EAAEC,OAAO3C,MAAM8C,cAAcC,UAAU,EAAG,IAC1C,eAGJC,WAAW,aAEb,kDAEF,iCClFKC,EA1CM,WAAO,IAAD,EACWlC,qBAAW5B,GAAvCM,EADiB,EACjBA,UAAWa,EADM,EACNA,aADM,EAGSd,oBAAS,GAHlB,mBAGlBqB,EAHkB,KAGPC,EAHO,KAUnB0B,EACJ,yBAAKZ,UAAU,aAAaM,MAAO,CAAEC,MAAO,SAC1C,kBAAC,SAAD,CACED,MAAO,CAAEgB,MAAO,QAChBpB,KAAK,aACLD,MAAM,MACNE,QAAS,kBAAMjB,GAAa,OAKlC,OACE,6BACE,kBAAC,QAAD,CAAOwB,OAAO,qBAAqBJ,MAAO,CAAEiB,UAAW,WACrD,kBAAC,YAAD,CACEnD,MAAOP,EACP2D,cAAc,SACdC,kBAAmB,SAACX,GAAD,OAtBLzD,EAsByByD,EAAE1C,MAAMhB,IArBrDsB,EAAarB,QACb6B,GAAa,GAFM,IAAC7B,GAuBduD,OAAQA,GAER,kBAAC,SAAD,CAAQhB,MAAM,MAAMc,OAAO,OAC3B,kBAAC,SAAD,CAAQd,MAAM,UAAUc,OAAO,YAC/B,kBAAC,SAAD,CAAQd,MAAM,YAAYc,OAAO,cACjC,kBAAC,SAAD,CAAQd,MAAM,aAAac,OAAO,kBAClC,kBAAC,SAAD,CAAQd,MAAM,aAAac,OAAO,oBAGtC,kBAAC,EAAD,CAAczB,UAAWA,EAAWC,aAAcA,MC5BzCwC,MAVf,WACE,OACE,yBAAK1B,UAAU,OACX,kBAAC,EAAD,KACI,kBAAC,EAAD,SCCQ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxF,MAAK,SAAAyF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.a6fab967.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport class PacienteService {\r\n\r\n    // LOCAL\r\n    // baseUrl = \"http://localhost:8080/api/pacientes/\";\r\n\r\n    // REMOTE\r\n    baseUrl = \"https://skyre-rest-api.herokuapp.com/api/pacientes/\";\r\n\r\n    create(paciente){\r\n        return axios.post(this.baseUrl+\"paciente/\", paciente).then(res => res.data);\r\n    }\r\n\r\n    readAll(){\r\n        return axios.get(this.baseUrl).then(res => res.data);\r\n    }\r\n\r\n    update(paciente){\r\n        return axios.put(this.baseUrl+\"paciente/\"+paciente._id, paciente).then(res => res.data);\r\n    }\r\n\r\n    delete(id){\r\n        return axios.delete(this.baseUrl+\"paciente/\"+id).then(res => res.data);\r\n    }\r\n}","import React, { createContext, useState, useEffect } from \"react\";\r\nimport { PacienteService } from \"../services/PacienteService\";\r\n\r\nexport const PacienteContext = createContext();\r\n\r\nconst PacienteContextProvider = (props) => {\r\n  const pacienteService = new PacienteService();\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n\r\n  const [editPaciente, setEditPaciente] = useState(null);\r\n\r\n  useEffect(() => {\r\n    pacienteService.readAll().then((data) => setPacientes(data));\r\n  }, [pacienteService, pacientes]);\r\n\r\n  const createPaciente = (paciente) => {\r\n    pacienteService\r\n      .create(paciente)\r\n      .then((data) => setPacientes([...pacientes, data]));\r\n  };\r\n\r\n  const deletePaciente = (id) => {\r\n    pacienteService\r\n      .delete(id)\r\n      .then(() => setPacientes(pacientes.filter((p) => p._id !== id)));\r\n  };\r\n\r\n  const findPaciente = (id) => {\r\n    const paciente = pacientes.find((p) => p._id === id);\r\n\r\n    setEditPaciente(paciente);\r\n  };\r\n\r\n  const updatePaciente = (paciente) => {\r\n    pacienteService\r\n      .update(paciente)\r\n      .then((data) =>\r\n        setPacientes(\r\n          pacientes.map((p) => (p._id === paciente._id ? data : paciente))\r\n        )\r\n      );\r\n\r\n    setEditPaciente(null);\r\n  };\r\n\r\n  return (\r\n    <PacienteContext.Provider\r\n      value={{\r\n        createPaciente,\r\n        deletePaciente,\r\n        findPaciente,\r\n        updatePaciente,\r\n        editPaciente,\r\n        pacientes,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </PacienteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PacienteContextProvider;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { PacienteContext } from \"../contexts/PacienteContext\";\r\nimport { Dialog } from \"primereact/dialog\";\r\nimport { Button } from \"primereact/button\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Calendar } from \"primereact/calendar\";\r\n\r\nconst PacienteForm = (props) => {\r\n  const { isVisible, setIsVisible } = props;\r\n\r\n  const {\r\n    createPaciente,\r\n    deletePaciente,\r\n    editPaciente,\r\n    updatePaciente,\r\n  } = useContext(PacienteContext);\r\n\r\n  const initialPacienteState = {\r\n    _id: null,\r\n    nombres: \"\",\r\n    apellidos: \"\",\r\n    fecha_alta: null,\r\n    fecha_baja: null,\r\n  };\r\n\r\n  const [pacienteData, setPacienteData] = useState(initialPacienteState);\r\n\r\n  useEffect(() => {\r\n    if (editPaciente) setPacienteData(editPaciente);\r\n  }, [editPaciente]);\r\n\r\n  const updateField = (data, field) => {\r\n    setPacienteData({\r\n      ...pacienteData,\r\n      [field]: data,\r\n    });\r\n\r\n    console.log(pacienteData);\r\n  };\r\n\r\n  const _deletePaciente = () => {\r\n    if (editPaciente) {\r\n      deletePaciente(pacienteData._id);\r\n      setPacienteData(initialPacienteState);\r\n    }\r\n    setIsVisible(false);\r\n  };\r\n\r\n  const savePaciente = () => {\r\n    if (!editPaciente) {\r\n      createPaciente(pacienteData);\r\n    } else {\r\n      updatePaciente(pacienteData);\r\n    }\r\n    setPacienteData(initialPacienteState);\r\n    setIsVisible(false);\r\n  };\r\n\r\n  const dialogFooter = (\r\n    <div className=\"ui-dialog-buttonpane p-clearfix\">\r\n      <Button label=\"Delete\" icon=\"pi pi-times\" onClick={_deletePaciente} />\r\n      <Button label=\"Save\" icon=\"pi pi-check\" onClick={savePaciente} />\r\n    </div>\r\n  );\r\n\r\n  const clearSelected = () => {\r\n    setIsVisible(false);\r\n    setPacienteData(initialPacienteState);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        visible={isVisible}\r\n        modal={true}\r\n        style={{ width: \"420px\" }}\r\n        contentStyle={{ overflow: \"visible\" }}\r\n        header=\"Detalles del Paciente\"\r\n        onHide={() => clearSelected()}\r\n        footer={dialogFooter}\r\n      >\r\n        <div className=\"p-grid p-fluid\">\r\n          <br />\r\n          <div className=\"p-float-label\">\r\n            <InputText\r\n              value={pacienteData.nombres}\r\n              onChange={(e) => updateField(e.target.value.trim(), \"nombres\")}\r\n            />\r\n            <label>Nombres:</label>\r\n          </div>\r\n          <br />\r\n          <div className=\"p-float-label\">\r\n          <InputText\r\n              value={pacienteData.apellidos}\r\n              onChange={(e) => updateField(e.target.value.trim(), \"apellidos\")}\r\n            />\r\n            <label>Apellidos:</label>\r\n          </div>\r\n          <br />\r\n          <div className=\"p-float-label\">\r\n            <Calendar\r\n              value={\r\n                pacienteData.fecha_alta &&\r\n                new Date(pacienteData.fecha_alta + \" \")\r\n              }\r\n              onChange={(e) =>\r\n                updateField(\r\n                  e.target.value.toISOString().substring(0, 10),\r\n                  \"fecha_alta\"\r\n                )\r\n              }\r\n              dateFormat=\"yy-mm-dd\"\r\n            />\r\n            <label>Fecha de alta:</label>\r\n          </div>\r\n          <br />\r\n          <div className=\"p-float-label\">\r\n            <Calendar\r\n              value={\r\n                pacienteData.fecha_baja &&\r\n                new Date(pacienteData.fecha_baja + \" \")\r\n              }\r\n              onChange={(e) =>\r\n                updateField(\r\n                  e.target.value.toISOString().substring(0, 10),\r\n                  \"fecha_baja\"\r\n                )\r\n              }\r\n              dateFormat=\"yy-mm-dd\"\r\n            />\r\n            <label>Fecha de baja:</label>\r\n          </div>\r\n          <br />\r\n        </div>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PacienteForm;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Panel } from \"primereact/panel\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Button } from \"primereact/button\";\r\nimport { PacienteContext } from \"../contexts/PacienteContext\";\r\nimport PacienteForm from \"./PacienteForm\";\r\n\r\nconst PacienteList = () => {\r\n  const { pacientes, findPaciente } = useContext(PacienteContext);\r\n\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  const savePaciente = (id) => {\r\n    findPaciente(id);\r\n    setIsVisible(true);\r\n  };\r\n\r\n  const footer = (\r\n    <div className=\"p-clearfix\" style={{ width: \"100%\" }}>\r\n      <Button\r\n        style={{ float: \"left\" }}\r\n        icon=\"pi pi-plus\"\r\n        label=\"Add\"\r\n        onClick={() => setIsVisible(true)}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Panel header=\"LISTA DE PACIENTES\" style={{ textAlign: \"center\" }}>\r\n        <DataTable\r\n          value={pacientes}\r\n          selectionMode=\"single\"\r\n          onSelectionChange={(e) => savePaciente(e.value._id)}\r\n          footer={footer}\r\n        >\r\n          <Column field=\"_id\" header=\"Id\" />\r\n          <Column field=\"nombres\" header=\"Nombres\" />\r\n          <Column field=\"apellidos\" header=\"Apellidos\" />\r\n          <Column field=\"fecha_alta\" header=\"Fecha de Alta\" />\r\n          <Column field=\"fecha_baja\" header=\"Fecha de Baja\" />\r\n        </DataTable>\r\n      </Panel>\r\n      <PacienteForm isVisible={isVisible} setIsVisible={setIsVisible} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PacienteList;\r\n","import React from 'react';\r\nimport 'primereact/resources/themes/nova-light/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport PacienteContextProvider from './contexts/PacienteContext';\r\nimport PacienteList from './components/PacienteList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <PacienteContextProvider>\r\n            <PacienteList/>\r\n        </PacienteContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}